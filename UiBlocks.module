<?php namespace ProcessWire;

class UiBlocks extends WireData implements Module
{
	/**
	 * Configurable properties
	 */
	public $manageAssets = true; // Set false to bypass all JS/CSS asset management/autoloading done by UI Blocks. If you disable this, you will have to manually include the scripts for each UI Block that you use.
	public $useFootScripts = false; // Use the footScripts as the default array instead of the headScripts when autoloading JS assets
	public $ajaxSessionWrite = true; // Set to false if you don't need to use session write during ajax requests. This will greatly increase the speed of concurrent ajax requests. You can also turn write on and off on a per request basis by adding sessionWrite=1 or sessionWrite=0 to your post or get request parameters. See __construct() below for more information.
	public $minify = true; // If a minification module (ProCache or AIOM) is installed, this will minify assets by default
	public $merge = false; // Should all CSS and JS files for each UI Block be merged into a single CSS and JS file for each block by default? Recommended: true on the root block (Layout) and false on all others

	/**
	 * Reserved properties, managed internally
	 */
	public $headScripts = []; // Holds JS assets for use in the html head section
	public $footScripts = []; // Holds JS assets for use in the html footer
	public $styles = []; // Holds CSS assets
	public $rawAssets = []; // An array of the original paths to all JS/CSS assets in use (before minification/bundling). This is for internal use only, to avoid including the same asset more than once.
	public $ajaxRequestUrl; // The requested url, without the ajax or ui get parameters (for ajax calls)
	public $currentUiPath = []; // Stores the path to the UI block that is currently executing
	public $checkPath = true; // We switch this off once we hit the target UI so that the ajax method we hit can still render additional sub-blocks
	public $proCache; // Holds reference to procache module if installed
	public $aiom; // Holds reference to AIOM module if installed
	public $registry = []; // An array of the unique Ui Blocks currently in use

	public static function getModuleInfo()
	{
		return array(
			'title' => 'UI Blocks',
			'version' => '1.4.1',
			'summary' => 'A component-based framework for building modular, nestable graphical user interfaces in ProcessWire using MVC principals. Similar to Vue or React components, but server-side.',
			'singular' => true,
			'autoload' => true,
			'installs' => array(),
			'requires' => array(),
			'icon' => 'cubes',
		);
	}

	public function __construct() {
		/**
		 * If we don't need to write to the session on this request, immediately call session_write_close to speed up concurrent ajax requests.
		 * The use of database session management is also highly recommended.
		 *
		 * Use sessionWrite=1 to enable and sessionWrite=0 to disable writing to the session.
		 *
		 * If sessionWrite is not found in the query string or post body, session write will default to the value of $ajaxSessionWrite on this module (which is true unless you've explicitly overridden it).
		 */
		if(!empty($_REQUEST['ajax'])) {
			$sessionWrite = $this->ajaxSessionWrite;

			// If sessionWrite is defined in post or get, use it to override the default setting
			if(isset($_REQUEST['sessionWrite'])) {
				if($_REQUEST['sessionWrite'] == '0') {
					$sessionWrite = false;
				}
				elseif($_REQUEST['sessionWrite'] == '1') {
					$sessionWrite = true;
				}
			}

			if($sessionWrite == false) {
				$this->addHookAfter('Session::init', function ($e) {
					session_write_close();
				});
			}
		}
	}

	public function init() {
		if($this->modules->isInstalled('ProCache') && $this->modules->getConfig('ProCache', 'cacheOn')) {
			$this->proCache = $this->modules->get('ProCache');
		}
		if($this->modules->isInstalled('AllInOneMinify')) {
			$this->aiom = $this->modules->get("AllInOneMinify");
		}

		/**
		 * If this is an ajax request or an action, we disable asset management / autoloading by default
		 * You can still enable it if needed by explicitly setting $modules-UiBlocks->manageAssets = true at the beginning of your script
		 */
		if($this->requestIsAjax() || $this->requestIsAction()) {
			$this->manageAssets = false;
		}

		/**
		 * $input->shouldLoad($uiId)
		 *
		 * Use the following if statement around any code in your controllers that you do not want to execute if this is an ajax request and the given UI was not requested. Since blocks that are not part of the UI path are automatically skipped during an ajax call anyway, this is primarily useful for wrapping around database calls and other logic that is happening outside of the block and then getting passed into it.
		 *
		 * An alternative is to pass in callback functions to the block for database calls.
		 *
		 * @todo: Move this to a regular method on the UiBlocks module, rename to isInUiPath('myBlockId') and match functionality of Ui::isInUiPath?
		 *
		 * if($this->input->shouldLoad('myBlockId')) {
		 * 		$items = $this->pages->find('template=something');
		 * 		$block = new MyBlockUi(['id' => 'myBlockId', 'items' => $items]);
		 * }
		 *
		 */
		$this->addHook('WireInput::shouldLoad', function($e) {
			$uiId = $e->arguments[0];
			$input = $e->object;

			if(!$input->ajax || !$this->checkPath) { // If not an ajax request or we don't need to check the path, return true
				$e->return = true;
			}
			elseif($this->uiRequestedAtCurrentDepth() && $this->uiRequestedAtCurrentDepth() === $uiId) { // UI matches the UI requested at the current depth
				$e->return = true;
			}
			else {
				$e->return = false;
			}
			$e->return = true;
		});

		// Autoload model classes from the /site/templates/model/ folder when called
		$this->wire('classLoader')->addNamespace('ProcessWire', wire('config')->paths->templates . "model/");

		require(dirname(__FILE__) . '/Ui.php'); // Load UI base class

		// Autoload UI subclasses from the /site/templates/ui/ folder when called
		spl_autoload_register(function ($class) {
			$lastTwo = substr($class, -2);
			if($lastTwo === 'Ui' || $lastTwo === 'UI') { // Class must end with 'Ui/UI' for this autoloader to be relevant

				$nameParts = explode('\\', $class);
				$className = array_pop($nameParts); // Get the class name without the namespace
				$className = substr($className, 0, -2); // Remove Ui/UI from the end

				$baseFolder = wire('config')->paths->templates . "ui";

				$dirLevels = '';
				$fileFound = false;

				while (!$fileFound) {
					$dirLevels .= '/*';
					$fileMatches = glob($baseFolder . $dirLevels . '/' . $className . 'U[iI].php', GLOB_NOSORT);
					if (count($fileMatches)) {
						$fileFound = true;
						require($fileMatches[0]);
					} else { // If there are no items at this level at all, stop looking.
						if (!count(glob($baseFolder . $dirLevels . '/', GLOB_NOSORT))) break;
					}
				}
			}
		});
	}

	public function ready() {
		if($this->input->ajax) {
			$this->setAjaxRequestUrl();
		}
	}

	/**
	 * Is this an ajax request?
	 *
	 * @return bool
	 */
	public function requestIsAjax() {
		return $this->input->ajax && $this->input->ui;
	}

	/**
	 * Is this an action request?
	 * Actions are non-ajax post requests that include a specific UI path and function name.
	 * They provide the efficiency of an ajax request but end in a redirect rather than returning markup or JSON
	 *
	 * @return bool
	 */
	public function requestIsAction() {
		$requestMethod = $_SERVER['REQUEST_METHOD'] ?? null;
		return $requestMethod && $this->input->post->ui && $this->input->post->action;
	}

	/**
	 * For ajax and action requests
	 * @return string|false ID of the UI Block that has been requested at the current depth/level, or false if no block was requested at this level
	 */
	public function uiRequestedAtCurrentDepth() {
		$depth = count($this->currentUiPath);
		$ajaxPath = explode('.', $this->input->ui);

		if(count($ajaxPath) < $depth) return false;

		return $ajaxPath[$depth - 1];
	}

	/**
	 * The requested url, without the ajax or ui get parameters (for ajax calls)
	 */
	private function setAjaxRequestUrl() {
		// Strip out ajax and ui vars from query string
		$getArray = $_GET;
		unset($getArray['ui']);
		unset($getArray['ajax']);
		$queryString = http_build_query($getArray);

		$this->ajaxRequestUrl = "{$this->input->url}?$queryString";
	}

	/**
	 * @return Handy functions for outputting assets in your markup
	 */

	public function headScripts($useHttpUrls = false) {
		$out = '';
		foreach($this->headScripts as $file) {
			if($useHttpUrls && substr($file, 0, 1) === '/')
				$file = substr($this->urls->httpRoot, 0, -strlen($this->urls->root)) . $file;

			$out .= "<script src=\"$file\"></script> \r\n";
		}
		return $out;
	}

	public function footScripts($useHttpUrls = false) {
		$out = '';
		foreach($this->footScripts as $file) {
			if($useHttpUrls && substr($file, 0, 1) === '/')
				$file = substr($this->urls->httpRoot, 0, -strlen($this->urls->root)) . $file;

			$out .= "<script src=\"$file\"></script> \r\n";
		}
		return $out;
	}

	public function styles($useHttpUrls = false) {
		$out = '';
		foreach($this->styles as $file) {
			if($useHttpUrls && substr($file, 0, 1) === '/')
				$file = substr($this->urls->httpRoot, 0, -strlen($this->urls->root)) . $file;

			$out .= "<link rel=\"stylesheet\" href=\"$file\" /> \r\n";
		}
		return $out;
	}

	public function inAssets(string $assetUrl) {
		return in_array($assetUrl, $this->rawAssets);
	}

	/**
	 * Right now all this does is to initialize an unused UI block object for purposes of running through its constructor and setup functions, which causes its JS and CSS assets to be loaded into the master asset arrays.
	 *
	 * @param $uiNames array|string - Either an array of UI Block names or a single UI Block name
	 */
	public function register($uiNames) {
		if(!is_array($uiNames)) {
			$uiNames = [$uiNames];
		}

		foreach($uiNames as $uiName) {
			$lastTwo = substr($uiName, -2);
			if($lastTwo !== 'Ui' && $lastTwo !== 'UI') $uiName = $uiName . 'Ui';
			$uiName = '\\ProcessWire\\' . $uiName;
			new $uiName();
		}
	}

	/**
	 * Add a UiBlock to the list of blocks currently in use
	 * Internal use only.
	 *
	 * @param $uiName
	 */
	public function addToRegistry(string $uiName) {
		if(!in_array($uiName, $this->registry)) {
			$this->registry[] = $uiName;
		}
	}

	public function isRegistered(string $uiName) {
		return in_array($uiName, $this->registry);
	}

	public function install() {}

	public function uninstall() {}

}